% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reprex.R
\name{reprex}
\alias{reprex}
\title{Render a reprex}
\usage{
reprex(x = NULL, venue = c("gh", "so"), si = FALSE, show = TRUE,
  input = NULL, outfile = NULL, opts_chunk = NULL, opts_knit = NULL)
}
\arguments{
\item{x}{An expression. If not given, \code{reprex()} looks for code in
\code{input} or on the clipboard, in that order.}

\item{venue}{"gh" for GitHub (default) or "so" for StackOverflow.}

\item{si}{Whether to include the results of
\code{\link[devtools]{session_info}()}, if available, or
\code{\link{sessionInfo}()} at the end of the reprex. When \code{venue =
"gh"} (the default), session info is wrapped in a collapsible details tag.}

\item{show}{Whether to show rendered output in a viewer (RStudio or browser).}

\item{input}{Character. If has length one and lacks a terminating newline,
interpreted as the path to a file containing reprex code. Otherwise assumed
to hold reprex code as character vector (length greater than one) or string
(with embedded newlines).}

\item{outfile}{Desired basename for output \code{.R}, \code{.md}, and
\code{.html} files for reproducible example, all written to current
working directory. Any existing \code{.md} extension is stripped to get a
file basename. If \code{NULL}, reprex writes to temp files below the
session temp directory.}

\item{opts_chunk, opts_knit}{Named list. Optional
\href{http://yihui.name/knitr/options/}{knitr chunk and package options},
respectively, to supplement or override reprex defaults. See Details.}
}
\description{
Given some R code on the clipboard or in an expression, character vector,
string, or file, this function runs it via \code{\link[rmarkdown]{render}()}.
The resulting bit of Markdown is the primary output. It is ready and waiting
on the clipboard, for pasting into a GitHub issue, for example. Optionally,
the R code and Markdown are left behind in files. An HTML preview displays in
RStudio's Viewer pane, if available, or in the default browser otherwise.
}
\details{
reprex sets specific \href{http://yihui.name/knitr/options/}{knitr options},
which you can supplement or override via the \code{opts_chunk} and
\code{opts_knit} arguments or via explicit calls to knitr in your reprex
code (see examples).

\itemize{
\item Chunk options: \code{collapse = TRUE}, \code{comment = '#>'},
\code{error = TRUE}. These are options you normally set via
\code{knitr::opts_chunk$set()}. Note that \code{error = TRUE} because a
common use case is bug reporting.
\item Package options: \code{upload.fun = knitr::imgur_upload}. These are
options you normally set via \code{knitr::opts_knit$set()}. The
\code{upload.fun} defaults to \code{\link[knitr]{imgur_upload}} so figures
produced by the reprex appear properly on GitHub.
}
}
\examples{
\dontrun{
# put some code like this on the clipboard
# (y <- 1:4)
# mean(y)
reprex()

# or provide it as code in brackets, i.e. as an expression:
reprex({y <- 1:4; mean(y)})

# note that you can include newlines in those brackets
# in fact, that is probably a good idea
reprex({
  x <- 1:4
  y <- 2:5
  x + y
})

## provide code via character vector
reprex(input = c("x <- 1:4", "y <- 2:5", "x + y"))

## if just one line, terminate with '\\n'
reprex(input = "rnorm(3)\\n")

# how to override a default chunk option
reprex({y <- 1:4; median(y)}, opts_chunk = list(comment = "#;-)"))
# the above is simply shorthand for this and produces same result
reprex({
  #+ setup, include = FALSE
  knitr::opts_chunk$set(comment = '#;-)')

  #+ actual-reprex-code
  y <- 1:4
  mean(y)
})

# how to add some prose and use general markdown formatting
reprex({
  #' # A Big Heading
  #'
  #' Look at my cute example. I love the
  #' [reprex](https://github.com/jennybc/reprex#readme) package!
  y <- 1:4
  mean(y)
})

# read reprex from file
writeLines(c("x <- 1:4", "mean(x)"), "foofy.R")
reprex(input = "foofy.R")
file.remove("foofy.R")

# write rendered reprex to file
reprex({
  x <- 1:4
  y <- 2:5
  x + y
}, outfile = "foofy")
list.files(pattern = "foofy")
file.remove(list.files(pattern = "foofy"))
}

}
